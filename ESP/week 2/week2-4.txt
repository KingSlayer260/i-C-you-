5.Een binaire 'semafoor' begint altijd leeg en wordt niet meteen beschikbaar gemaakt.

6.Een 'telsysteem' voor 'semaforen' begint met een startwaarde die overeenkomt met het opgegeven aantal in de tweede parameter van de functie xSemaphoreCreateCounting().

7.Bij het probleem van dining philosopher wordt aan elke vork een tel-semafoor gekoppeld. Als een philosopher een vork wil gebruiken, moet hij eerst het telsysteem verkrijgen. Als het beschikbaar is (op 1 staat), kan de philosopher de vork nemen; anders moet hij wachten. Dit voorkomt vastlopen doordat als een philosopher geen vork kan krijgen, hij alle vorken die hij al heeft, loslaat. Hierdoor kan iemand anders verder en wordt kringvormig wachten voorkomen. Het telsysteem zorgt ervoor dat de toegang tot vorken beheerst wordt, waardoor mogelijke problemen worden voorkomen in het eetende filosofen scenario. Door te beperken dat maximaal drie philosophers tegelijk willen eten, is er altijd minstens één philosopher die kan eten.